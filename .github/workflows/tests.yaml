name: Tests

on:
  release:
    types: [published]
  push:
    branches:
      - [master]
    tags: [v*]
  pull_request:
    branches: [main, develop]

jobs:
  Linting: #see https://docs.github.com/en/actions/guides/building-and-testing-python
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: pre-commit/action@v2.0.0

  Test:
    needs: Linting
    name: ${{ matrix.os }}, ${{ matrix.env }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest] #[ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.8, 3.9]
        env:
          OS: ${{ matrix.os }}
          PYTHON: ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          if [ -f requirements/dev.txt ]; then pip install -r requirements/dev.txt; fi
          if [ -f requirements/docs.txt ]; then pip install -r requirements/docs.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings.
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      - name: Lint with black
        uses: psf/black@21.5b2
        with:
          args: ". --check"
        #advanced usage: https://github.com/rickstaa/action-black/
      - name: Test with pytest
        env:
          PYTHONPATH: .
        run: |
          pytest -vv
      - name: Generate coverage report
        if: ${{ matrix.python-version == '3.8' &&  matrix.os == 'ubuntu-latest' }}
        env:
          PYTHONPATH: .
        run: |
          pytest --cov=./ --cov-report=xml
      - name: Upload coverage to Codecov
        if: ${{ matrix.python-version == '3.8' &&  matrix.os == 'ubuntu-latest' }}
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          directory: ./coverage/reports/
          flags: unittests
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: false
          path_to_write_report: ./coverage/codecov_report.txt
          verbose: true